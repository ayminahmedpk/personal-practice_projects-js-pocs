

Accessors:
  The 'get' and 'set' keywords used to declare a function are the main
  mechanism. From outside the object, it looks like a normal property is being
  accessed (no () are added at the end, but the function runs regardless).

  There are two types of accessors: Normal accessors, and Smart (wrapper) accessors.



Normal accessors:
  Functions that retrieve / set values in realtime that don't actually exist;
  but are computed in realtime from other existing properties.
  
  Eg: Computing and returning 'fullName' from 'name' and 'surname' properties.





Smart accessors:
  Functions that control or tailor access to (wrap over) existing properties.
  Conventionally, accessors are named 'name' and property is named '_name', to
  denote it's private, internal nature.
  
  Eg: Setter function 'name' not allowing write access to '_name' if received
  string is less than 4 characters long.



  Usage:
    Be mindful never to read as accessorName() or write as accessorName(a,b,c).
    The whole point of accessors is to use the same syntax as properties.
    Use 'myObj.accessorName' to read or 'myObj.accessorName = `abc`' to write.

    Also, make sure the accessor name doesn't include a verb. Remember, it's
    supposed to look like and be treated as a property, not a function.

    To create a new accessor / modify an accessor on an existing object, use
    property descriptors (look at the
    descriptors-for-properties-and-accessors-summary.txt file).
// Just make sure your test function returns a promise
// Easiest way is to repalse arrow function's {} with ()
// Any expects or whatever you want, can be chained to that promise

const {promiseCreator} = require('./promises-basic.js');


describe('Creating and testing simple promises', () => {
  
  test('A simple resolved promise', () => {
    return new Promise(
      resolve => {
        setTimeout(() => {resolve('resolves after 1 second')}, 500)
      }
    ).then(result => expect(result).toBe('resolves after 1 second'))
  });
  
  // Note - 'then' takes resolve callback first, and reject callback second
  // So make sure JS knows that the callback you pass is the second argument
  // Also note: Using () for the test arrow function, so skipping 'return' keyword
  test('A simple rejected promise with and rejection handler in .then', () => (
    new Promise( (resolve, reject) => {
      setTimeout(() => {reject('rejects after 1 second')}, 500);
    }).then( null, result => {expect(result).toBe('rejects after 1 second');})
  ))

  // Unlike 'then' which takes two arguments (resolve and reject callbacks),
  // 'catch' takes just one (which may be reject statement or error object)
  test('A simple rejected promise handled with .catch instead of .then', () => (
    new Promise( (resolve, reject) => {
      setTimeout(() => { reject('rejects after 1 second'); }, 500);
    }).catch(result => expect(result).toBe('rejects after 1 second'))
  ))

});


describe('Testing promises generated by our function', () => {
  test('Testing for conditionally resolved promise', () => (
    promiseCreator('yes')
      .then(result => expect(result).toBe('yes from resolved promise'))
  ))
  
  // Notice that we provide handler as the second argument.
  // This promise will be rejected, so it needs a reject handler
  test('Testing for conditionally rejected promise', () => (
    promiseCreator('', 'no')
      .then(null, result => expect(result).toBe('no from rejected promise'))
  ))
});